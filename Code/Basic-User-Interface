
{
var keys = [];
keyPressed = function(){
    keys[keyCode] = true;
};
keyReleased = function(){
    keys[keyCode] = false;
};
var clicked = false;
mouseClicked = function(){
    clicked = true;
};
}

var graphics = {
    tile: function(Color,x,y,Size,Type){
        fill(Color);
        rect(x,y,Size,Size);
        for (var nSize = 0; nSize < Size; nSize += 3){
            fill(0,0,0,10);
            if (Type === 1){
                rect(x,y,nSize,Size);
            }
            if (Type === 2){
                rect(x+Size,y,-nSize,Size);
            }
            if (Type === 3){
                rect(x,y,Size,nSize);
            }
            if (Type === 4){
                rect(x,y+Size,Size,-nSize);
            }
        }
    },
    
    grassTile: function(x,y,Size,Type){
        graphics.tile(color(0, 130, 9),x,y,Size,Type);
    },
    waterTile: function(x,y,Size,Type){
        graphics.tile(color(0, 85, 255),x,y,Size,Type);
    },
    treeTile: function(x,y,Size){
        pushMatrix();
        translate(x,y);
        scale(Size/340);
        translate(-60,-200);
        fill(87, 48, 0);
        beginShape();
        vertex(124,210);
        vertex(127,247);
        vertex(126,278);
        vertex(126,303);
        vertex(119,375);
        vertex(187,375);
        vertex(180,335);
        vertex(173,293);
        vertex(170,247);
        vertex(168,211);
        endShape();
        fill(0, 92, 6);
        beginShape();
        curveVertex(159,36);
        curveVertex(159,36);
        curveVertex(139,33);
        curveVertex(102,53);
        curveVertex(55,101);
        curveVertex(40,152);
        curveVertex(55,175);
        curveVertex(74,208);
        curveVertex(112,223);
        curveVertex(204,225);
        curveVertex(276,176);
        curveVertex(284,141);
        curveVertex(281,112);
        curveVertex(249,59);
        curveVertex(187,40);
        curveVertex(159,36);
        curveVertex(159,36);
        endShape();
        popMatrix();
    },
    sandTile: function(x,y,Size,Type){
        graphics.tile(color(255, 229, 150),x,y,Size,Type);
    },
    sandDuneTile: function(x,y,Size){
        pushMatrix();
        translate(x,y);
        scale(Size/220);
        translate(-70,-80);
        fill(163, 146, 106);
        beginShape();
        curveVertex(83,255);
        curveVertex(83,255);
        curveVertex(101,216);
        curveVertex(128,120);
        curveVertex(163,100);
        curveVertex(226,120);
        curveVertex(262,213);
        curveVertex(278,264);
        curveVertex(83,295);
        curveVertex(83,255);
        endShape();
        popMatrix();
    },
    pathTile: function(x,y,Size,Type){
        graphics.tile(color(69, 30, 0),x,y,Size,Type);
    },
    chestTile: function(x,y,Size,Type){
        pushMatrix();
        translate(x,y);
        translate(5,10);
        scale(Size/230);
        fill(82, 52, 0);
        rect(0,50,200,120);
        fill(66, 36, 0);
        arc(100,50,200,100,180,360);
        rect(0,50,200,20);
        stroke(100);
        strokeWeight(3);
        line(0,60,9,66);
        line(9,66,19,71);
        line(19,71,43,74);
        line(43,74,62,74);
        line(62,74,77,74);
        line(77,74,128,70);
        line(128,70,153,73);
        line(153,73,171,75);
        line(171,75,187,75);
        line(187,75,198,71);
        noStroke();
        fill(112, 112, 112);
        rect(85,50,30,40,10);
        fill(0);
        ellipse(100,60,10,10);
        rect(97,66,5,15);
        fill(100);
        ellipse(0,60,7,7);
        ellipse(9,66,7,7);
        ellipse(19,71,7,7);
        ellipse(43,74,7,7);
        ellipse(62,74,7,7);
        ellipse(77,74,7,7);
        ellipse(128,70,7,7);
        ellipse(153,73,7,7);
        ellipse(171,75,7,7);
        ellipse(187,75,7,7);
        ellipse(198,71,7,7);
        popMatrix();
    },
    wallTile: function(x,y,Size,Type){
        graphics.tile(color(117, 117, 117),x,y,Size,Type);
    },
    campfireTile: function(x,y,Size){
        pushMatrix();
        translate(x,y);
        scale(Size/200);
        translate(-75,-115);
        fill(255, 213, 0);
        beginShape();
        curveVertex(120,256);
        curveVertex(120,256);
        curveVertex(128,236);
        curveVertex(128,213);
        curveVertex(132,195);
        curveVertex(137,183);
        curveVertex(142,175);
        curveVertex(152,160);
        curveVertex(159,154);
        curveVertex(169,151);
        curveVertex(176,147);
        curveVertex(193,157);
        curveVertex(210,140);
        curveVertex(220,136);
        curveVertex(235,152);
        curveVertex(239,183);
        curveVertex(230,213);
        curveVertex(246,238);
        curveVertex(253,252);
        curveVertex(253,252);
        endShape();
        fill(255, 140, 0);
        beginShape();
        curveVertex(144,251);
        curveVertex(144,251);
        curveVertex(141,229);
        curveVertex(159,187);
        curveVertex(183,179);
        curveVertex(182,188);
        curveVertex(194,200);
        curveVertex(207,208);
        curveVertex(229,249);
        curveVertex(216,247);
        curveVertex(216,247);
        endShape();
        fill(255, 81, 0);
        beginShape();
        curveVertex(160,236);
        curveVertex(160,246);
        curveVertex(170,218);
        curveVertex(179,214);
        curveVertex(201,259);
        curveVertex(170,255);
        curveVertex(170,245);
        endShape();
        fill(100,100,100,80);
        beginShape();
        curveVertex(115,166);
        curveVertex(115,166);
        curveVertex(116,135);
        curveVertex(164,83);
        curveVertex(194,85);
        curveVertex(221,103);
        curveVertex(188,119);
        curveVertex(140,126);
        curveVertex(133,162);
        curveVertex(110,175);
        curveVertex(110,175);
        endShape();
        beginShape();
        curveVertex(234,105);
        curveVertex(234,105);
        curveVertex(253,100);
        curveVertex(286,131);
        curveVertex(276,164);
        curveVertex(262,153);
        curveVertex(258,140);
        curveVertex(241,123);
        curveVertex(225,111);
        curveVertex(225,111);
        endShape();
        beginShape();
        curveVertex(125,31);
        curveVertex(125,31);
        curveVertex(171,16);
        curveVertex(239,30);
        curveVertex(256,56);
        curveVertex(210,59);
        curveVertex(169,55);
        curveVertex(141,55);
        curveVertex(114,48);
        curveVertex(114,48);
        endShape();
        fill(69, 39, 1);
        quad(103,243,261,249,258,265,102,263);
        fill(87, 49, 2);
        quad(128,235,182,280,207,279,142,234);
        fill(41, 23, 1);
        quad(145,289,220,221,233,231,169,290);
        fill(69, 31, 1);
        quad(130,252,227,281,207,291,120,276);
        fill(46, 27, 3);
        quad(146,294,224,239,244,263,186,293);
        fill(97, 59, 12);
        quad(169,225,183,221,198,292,163,298);
        fill(112, 72, 24);
        quad(100,293,151,222,166,228,120,297);
        popMatrix();
    },
};

var board = [
[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[3,3,3,3,1,6,1,4,2,2,4,1,3,3,1,3,1,3,1,1,3,1,3,3,3],
[3,3,3,1,3,6,4,5,2,2,2,4,1,3,3,1,3,1,3,3,1,3,1,3,3],
[3,3,3,3,6,6,4,4,4,2,2,2,4,1,3,1,1,3,1,3,1,1,3,3,3],
[3,3,3,6,6,5,4,4,2,2,2,5,4,4,1,3,1,3,1,3,1,1,3,3,3],
[3,3,6,6,4,4,5,2,2,2,2,2,4,5,4,1,3,1,3,1,3,3,1,3,3],
[3,3,3,3,3,4,4,4,2,2,2,2,2,4,5,4,1,2,3,1,1,3,1,3,3],
[3,3,1,3,4,4,5,2,2,2,2,2,5,4,5,4,4,2,2,1,3,1,3,3,3],
[3,3,1,1,1,5,4,4,2,2,5,4,5,4,4,4,1,1,2,1,1,1,1,3,3],
[3,3,1,1,1,3,4,4,4,2,5,4,4,5,4,1,3,1,1,3,1,1,3,3,3],
[3,3,3,1,1,1,1,5,4,4,4,5,4,4,7,1,3,1,3,3,1,3,3,3,3],
[3,3,8,8,8,1,8,8,8,8,8,8,8,1,8,8,1,3,1,1,3,3,3,3,3],
[3,3,8,1,1,1,1,1,1,1,1,1,1,1,1,8,8,1,3,1,3,1,1,3,3],
[3,3,8,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,3,1,1,1,3,3,3],
[3,3,8,1,1,1,1,1,9,9,1,1,1,1,1,1,1,8,8,1,3,1,1,3,3],
[3,3,8,1,1,1,1,9,9,9,9,1,1,1,1,1,1,1,8,8,1,3,1,3,3],
[3,3,8,1,1,1,1,1,9,9,1,1,1,1,1,1,1,1,1,8,3,1,3,3,3],
[3,3,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,3,1,3,3],
[3,3,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,3,1,3,3,3],
[3,3,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,1,3,3,1,3,3],
[3,3,1,8,8,1,1,1,1,1,1,1,1,1,1,1,8,8,1,3,1,1,3,3,3],
[3,3,1,1,8,8,8,1,1,8,8,8,8,8,8,8,8,1,3,1,3,1,3,3,3],
[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
];
var npcs = [

];
var preferences = [];
var boardTiles = ["grass","water","tree","sand","sanddune","path","chest","wall","campfire"];
var pixelDisplay = function(x,y,Width,Height,Design,Colors){
    //Translates the graphics to the correct place
    noStroke();
    pushMatrix();
    translate(x,y);
    //Goes through the entire array of pixels along with the array of colors
    for (var y = 0; y < Design.length; y++){
        for (var x = 0; x < Design[y].length; x++){
            for (var i = 0; i < Colors.length; i++){
                //Fills the rectangles according to which color is at the position that the array states
                if (Design[y][x]-1 === i){
                    fill(Colors[i]);
                }else{
                    noFill();
                }
                rect(x*Width/Design[y].length,y*Height/Design.length,Width/Design[y].length+1,Height/Design.length+1);
            }
        }
    }
    popMatrix();
};

var setAlexTsPreferences = function(){
    textAlign(CENTER,CENTER);
    noStroke();
    if (!mouseIsPressed){
        clicked = false;
    }
};

var character = function(){
    this.pos = new PVector(350,40);
    this.Size = 50;
    this.speed = 20;
};
character.prototype.display = function(){

};
character.prototype.update = function(){
    if (keys[LEFT]){
        this.pos.x -= this.speed;
    }
    if (keys[RIGHT]){
        this.pos.x += this.speed;
    }
    if (keys[UP]){
        this.pos.y -= this.speed;
    }
    if (keys[DOWN]){
        this.pos.y += this.speed;
    }
    this.pos.x = constrain(this.pos.x,-0,board[0].length*80);
    this.pos.y = constrain(this.pos.y,-0,board.length*80);
};

var player = new character();

var initiateExploration = function(){
    background(148, 200, 255);
    for (var Size = 0; Size < 200; Size += 9){
        fill(255,255,255,20);
        ellipse(380,20,Size,Size);
    }
    pushMatrix();
    translate(-player.pos.x,-player.pos.y);
    for (var y = 0; y < board.length; y ++){
        for (var x = 0; x < board[y].length; x ++){
            if (board[y][x] === 1){
                graphics.grassTile(x * 100, y * 100, 100,preferences[x+y]);
            }else if (board[y][x] === 2){
                graphics.waterTile(x * 100, y * 100, 100,preferences[x+y]);
            }else if (board[y][x] === 4){
                graphics.sandTile(x * 100, y * 100, 100,preferences[x+y]);
            }else if (board[y][x] === 6){
                graphics.pathTile(x * 100, y * 100, 100,preferences[x+y]);
            }else if (board[y][x] === 8){
                graphics.wallTile(x * 100, y * 100, 100,preferences[x+y]);
                
            }else if (board[y][x] === 9){
                graphics.grassTile(x * 100, y * 100, 100,preferences[x+y]);
                graphics.campfireTile(x * 100, y * 100, 100,preferences[x+y]);
            }else if (board[y][x] === 7){
                graphics.grassTile(x * 100, y * 100, 100,preferences[x+y]);
                graphics.chestTile(x * 100, y * 100, 100,preferences[x+y]);
            }else if (board[y][x] === 5){
                graphics.sandTile(x * 100, y * 100, 100,preferences[x+y]);
                graphics.sandDuneTile(x * 100, y * 100, 100,preferences[x+y]);
            }else if (board[y][x] === 3){
                graphics.grassTile(x * 100, y * 100, 100,preferences[x+y]);
                graphics.treeTile(x * 100, y * 100, 150,preferences[x+y]);
            }
        }
    }
    popMatrix();
    player.display();
    player.update();
};
draw = function() {
    setAlexTsPreferences();
    initiateExploration();
    if (preferences.length < 441){
        preferences.push(floor(random(1,5)));
    }
    background(255);
};
